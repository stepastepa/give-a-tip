require('dotenv').config(); // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º .env

const express = require('express');
const jwt = require('jsonwebtoken'); // JWT Token –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏

const { GoogleGenAI } = require("@google/genai"); // for commonJS
// const { OpenAI } = require('openai'); // for commonJS

const crypto = require('crypto'); // ‚ö†Ô∏è üü™ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π (default)
const { randomUUID } = require('crypto'); // ‚ö†Ô∏è crypto - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–º–µ–Ω
const { hashPassword, verifyPassword } = require('./auth'); // üü™ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ

const fs = require('fs');
const path = require('path');
const bodyParser = require('body-parser'); // –¥–ª—è req.body JSON
const cors = require('cors'); // –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç –∏ –±—ç–∫–µ–Ω–¥ –±—É–¥—É—Ç –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –¥–æ–º–µ–Ω–∞—Ö/–ø–æ—Ä—Ç–∞—Ö)
const app = express();
const PORT = process.env.PORT || 3000;
const secretKey = process.env.JWT_SECRET;
const apiKey = process.env.GEMINI_API_KEY;
const apiKeyBehindthename = process.env.BEHINDTHENAME_API_KEY;

const COURIERS_FILE = path.join(__dirname, 'couriers.json');
let couriers = [];

function loadCouriers() {
  try {
    couriers = JSON.parse(fs.readFileSync(COURIERS_FILE, 'utf8'));
  } catch (err) {
    couriers = [];
  }
}

function saveCouriers() {
  fs.writeFileSync(COURIERS_FILE, JSON.stringify(couriers, null, 2));
}

/*
function removeOldCouriers() {
  const now = Date.now();
  const oneDay = 24 * 60 * 60 * 1000;
  const before = couriers.length;
  couriers = couriers.filter(c => now - c.updatedAt < oneDay);
  if (couriers.length !== before) {
    console.log(`[Clean] Removed ${before - couriers.length} old couriers.`);
    saveCouriers();
  }
}
// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(removeOldCouriers, 10 * 60 * 1000);
*/

loadCouriers();

app.use(cors());
app.use(bodyParser.json()); // –¥–ª—è req.body JSON
app.use(express.static('public'));

// üî∂APIüî∂ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
app.post('/api/register', (req, res) => {
  const { username, email, password } = req.body;
  if (!username || !email || !password) return res.status(400).json({ error: 'Missing fields' });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  if (couriers.find(user => user.username === username)) {
    return res.status(400).json({ message: 'User already exists' });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–º–µ–π–ª–∞
  const isValidEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  if (!isValidEmail) {
    return res.status(400).json({ message: 'Email is incorrect' });
  }

  // empty default values
  let name = `Courier ${randomUUID().slice(0, 6)}`; // ‚ö†Ô∏è crypto - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–º–µ–Ω
  // let name = `Courier ${Math.floor(Math.random() * 9999)}`;
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –∏–º—è
  // while (couriers.find(user => user.name === name)) {
  //   name = `Courier ${Math.floor(Math.random() * 9999)}`;
  // }
  let message = 'Thank you!';
  let bankLink = '';
  let updatedAt = Date.now();
  let avatarLink = '';

  // —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  const { hash, salt } = hashPassword(password); // üü™ hash+salt –≤–º–µ—Å—Ç–æ password

  const newCourier = { username, email, /*password*/ hash, salt, name, message, bankLink, updatedAt, avatarLink };
  couriers.push(newCourier);
  saveCouriers();
  res.json({ success: true, username });
});

// üî∂APIüî∂ –ó–∞—Ö–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å
app.post('/api/login', (req, res) => {
  const { email, password } = req.body;

  const user = couriers.find(user => user.email === email);
  if (!user) {
    return res.status(401).json({ message: 'Email is incorrect' });
  }
  const isValidPassword = verifyPassword(password, user.hash, user.salt); // üü™
  if (!isValidPassword) {
    return res.status(401).json({ message: 'Password is incorrect' });
  }
  if (/*user.password === password*/isValidPassword) {
    const token = jwt.sign(user, secretKey, { expiresIn: '1h' });
    return res.status(200).json({ message: 'Loading, please wait.', token });
  }
});

// üî∂APIüî∂ –§–æ—Ä–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∫—É—Ä—å–µ—Ä–∞
app.get('/api/edit', (req, res) => {
  const authHeader = req.headers.authorization;
  if (!authHeader?.startsWith('Bearer ')) {
    return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
  }
  const token = authHeader.split(' ')[1];

  try {
    const decoded = jwt.verify(token, secretKey);
    const courier = couriers.find(c => c.username === decoded.username);
    if (!courier) {
      return res.status(404).json({ error: '–ö—É—Ä—å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    res.json({ user: courier }); // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç
  } catch (err) {
    res.status(403).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
});

// üî∂APIüî∂ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∫—É—Ä—å–µ—Ä–∞
// app.post('/api/update', (req, res) => {
//   const { username, email, password, name, message, bankLink } = req.body;
//   const courier = couriers.find(c => c.username === username);
//   if (!courier) {
//     return res.status(404).json({ error: '–ö—É—Ä—å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
//   }
//   courier.email = email;
//   courier.password = password;
//   courier.name = name;
//   courier.message = message;
//   courier.bankLink = bankLink;
//   courier.updatedAt = Date.now(); // —á–∏—Å–ª–æ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
//   saveCouriers();
//   res.json({ success: true, username });
// });
app.post('/api/update', (req, res) => {
  const authHeader = req.headers.authorization;
  if (!authHeader?.startsWith('Bearer ')) {
    return res.status(401).json({ error: '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞' });
  }
  const token = authHeader.split(' ')[1];
  try {
    const decoded = jwt.verify(token, secretKey);
    const username = decoded.username; // username –±–µ—Ä–µ–º –∏–∑ —Ç–æ–∫–µ–Ω–∞!!!!!!

    const courier = couriers.find(user => user.username === decoded.username);
    if (!courier) {
      return res.status(404).json({ error: '–ö—É—Ä—å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    const { email, name, message, bankLink, avatarLink } = req.body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –∏–º—è
    if (couriers.find(user => user.name === name) && courier.name !== name) {
      return res.status(400).json({ message: 'Name already exists' });
    }

    courier.email = email;
    courier.name = name;
    courier.message = message;
    courier.bankLink = bankLink;
    courier.updatedAt = Date.now();
    courier.avatarLink = avatarLink;
    saveCouriers();
    res.json({ success: true, username }); // username –±–µ—Ä–µ–º –∏–∑ —Ç–æ–∫–µ–Ω–∞!!!!!!
  } catch (err) {
    res.status(403).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
});

// üî∂APIüî∂ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤
app.get('/api/couriers', (req, res) => {
  /*
  // —Ç–æ–ª—å–∫–æ —Ç–µ, –∫—Ç–æ –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ —Å—Å—ã–ª–∫—É:
  // view current time: https://currentmillis.com/
  const now = Date.now();
  const oneDay = 24 * 60 * 60 * 1000;
  const active = couriers.filter(c => now - c.updatedAt < oneDay).map(({ username, name }) => ({ username, name }));
  res.json(active);
  */
  // —Ç–æ–ª—å–∫–æ —Ç–µ –∫—É—Ä—å–µ—Ä—ã, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ bankLink:
  const valid = couriers.filter(c => c.bankLink !== '').map(({ username, name }) => ({ username, name }));
  res.json(valid);
});

// üî∂APIüî∂ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
app.get('/api/listOfUsers', (req, res) => {
  const listOfUsers = couriers.map(({ username, email }) => ({ username, email }));
  res.json(listOfUsers);
});

// üî∂APIüî∂ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞
app.get('/api/profile/:username', (req, res) => {
  const { username } = req.params;
  // const now = Date.now();
  // const oneDay = 24 * 60 * 60 * 1000;

  const courier = couriers.find(c => c.username === username/* && now - c.updatedAt < oneDay*/);

  if (!courier) {
    return res.status(404).json({ error: 'Courier not found or inactive' });
  }

  res.json({
    username: courier.username,
    name: courier.name,
    message: courier.message,
    bankLink: courier.bankLink,
    updatedAt: courier.updatedAt,
    avatarLink: courier.avatarLink
  });
});

// üî∂APIüî∂ geminiAI
app.get('/api/aigenerate', async (req, res) => {
  try {
    const ai = new GoogleGenAI({ apiKey: apiKey });

    async function generate() {
      // –ü—Ä—è–º–æ –ø—Ä–∏–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞—Ç—å JSON –∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ö–µ–º–µ.
      const prompt = "Generate a JSON object with a random 'firstName' and 'lastName'. Strictly adhere to the JSON schema and only return the JSON object, without any introductory text.";

      const response = await ai.models.generateContent({
        model: "gemini-2.0-flash",
        contents: prompt,
        generationConfig: {
          // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∂–¥–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
          responseMimeType: "application/json",
          responseSchema: {
            type: "OBJECT",
            properties: {
              firstName: {
                type: "STRING",
                description: "The person's generated first name."
              },
              lastName: {
                type: "STRING",
                description: "The person's generated last name."
              }
            },
            required: ["firstName", "lastName"]
          },
        },
      });

      const rawText = response.text;
      // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é—Å—è —Ñ–∏–≥—É—Ä–Ω—É—é —Å–∫–æ–±–∫—É '{'
      const jsonStart = rawText.indexOf('{');
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é—Å—è —Ñ–∏–≥—É—Ä–Ω—É—é —Å–∫–æ–±–∫—É '}'
      const jsonEnd = rawText.lastIndexOf('}');

      if (jsonStart !== -1 && jsonEnd !== -1) {
        // –í—ã—Ä–µ–∑–∞–µ–º –ø–æ–¥—Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ JSON
        const jsonString = rawText.substring(jsonStart, jsonEnd + 1);
        try {
          // –¢–µ–ø–µ—Ä—å –ø–∞—Ä—Å–∏–º —á–∏—Å—Ç—É—é JSON-—Å—Ç—Ä–æ–∫—É
          const jsonResponse = JSON.parse(jsonString);
          return jsonResponse;
        } catch (e) {
           console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", e);
           throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI.");
        }
      } else {
        console.error("–í –æ—Ç–≤–µ—Ç–µ AI –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π JSON:", rawText);
        throw new Error("–í –æ—Ç–≤–µ—Ç–µ AI –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π JSON.");
      }
    }

    // –î–æ–∂–∏–¥–∞–µ–º—Å—è, –ø–æ–∫–∞ Promise —Ä–∞–∑—Ä–µ—à–∏—Ç—Å—è –∏ –≤–µ—Ä–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const randomName = await generate();
    console.log(randomName);
    res.json({ randomName });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", error);
    res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–º—è" });
  }
});

/*
///////////////////////////////////////////////////////////////
// üî∂APIüî∂ OpenAI
app.get('/api/openaigenerate', async (req, res) => {
  try {
    const client = new OpenAI({
      apiKey: process.env['OPENAI_API_KEY'], // This is the default and can be omitted
    });

    async function generate() {
      const response = await client.responses.create({
        model: 'gpt-4o',
        input: "Generate a JSON object with a random 'firstName' and 'lastName'. Strictly adhere to the JSON schema and only return the JSON object, without any introductory text.",
      });

      return response.output_text;
    }

    // –î–æ–∂–∏–¥–∞–µ–º—Å—è, –ø–æ–∫–∞ Promise —Ä–∞–∑—Ä–µ—à–∏—Ç—Å—è –∏ –≤–µ—Ä–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const randomName = await generate();
    console.log(randomName);
    res.json({ randomName });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", error);
    res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–º—è" });
  }
});
*/

///////////////////////////////////////////////////////////////
// üî∂APIüî∂ from behindthename site
app.get('/api/generate', async (req, res) => {
  try {
    /*
    async function getRandomName() {
      const url = `https://www.behindthename.com/api/random.json?key=${apiKeyBehindthename}&randomsurname=yes&usage=eng`;

      try {
        const response = await fetch(url);
        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
        const data = await response.json();
        // console.log(data.names);
        return data.names;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
      }
    }
  
    const randomName = await getRandomName();
    */

    const url = `https://www.behindthename.com/api/random.json?key=${apiKeyBehindthename}&randomsurname=yes&usage=eng`;
    const response = await fetch(url);
    const data = await response.json();
    const randomName = data.names;

    console.log(randomName);
    res.json({ randomName });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", error);
    res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–º—è" });
  }
});
///////////////////////////////////////////////////////////////

// üü¢htmlüü¢ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º index.html
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// üü¢htmlüü¢ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º edit.html
app.get('/edit', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'edit.html'));
});

// üü¢htmlüü¢ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º list.html ‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå
// app.get('/list', (req, res) => {
//   res.sendFile(path.join(__dirname, 'public', 'list.html'));
// });

// üü¢htmlüü¢ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º login.html
app.get('/login', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'login.html'));
});

app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});